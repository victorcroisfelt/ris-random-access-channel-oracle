# -*- coding: utf-8 -*-
"""shannon-nyquist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rrWQ-d-wkfkvCnTX6grWVn6lpai5unHP
"""

import matplotlib
import matplotlib.pyplot as plt

import numpy as np

from scipy.constants import speed_of_light
import scipy.integrate as integrate

plt.rc('text', usetex=True)
plt.rc('text.latex', preamble=r'\usepackage{amsmath} \usepackage{amsmath} \usepackage{amssymb}')
matplotlib.rc('font', **{'family': 'sans serif', 'serif': ['Computer Modern'], 'size': 8})

########################################
# Private functions
########################################


def integrand_power(x, ris_num_els_hor, ue_angles, fundamental_freq):
    """

    :param x:
    :param ris_num_els_hor:
    :param ue_angle:
    :param fundamental_freq:
    :return:
    """

    # Enumerate elements
    enumeration_els_hor = np.arange(1, ris_num_els_hor + 1)

    # Compute result
    result = np.abs((np.exp(1j * 2 * np.pi * fundamental_freq * enumeration_els_hor * (np.sin(ue_angles) - np.sin(x)))).sum())**2

    return result


def average_power(ue_angles, ris_num_els_hor, fundamental_freq):
    """

    :param ue_pos:
    :param ris_num_els_hor:
    :param fundamental_freq:
    :return:
    """

    # Fundamental period
    fundamental_period = 1 / fundamental_freq

    # Prepare to save average power
    avg_power = np.zeros_like(ue_angles)

    # Go through all angles
    for ue, angle in enumerate(ue_angles):

        # Solve integral
        result = integrate.quad(integrand_power, 0, np.pi/2, args=(ris_num_els_hor, angle, fundamental_freq))

        # Compute average power
        avg_power[ue] = 1/fundamental_period * result[0]

    return avg_power


########################################
# Parameters
########################################

# Electromagnetics
carrier_frequency = 3e9
wavelength = speed_of_light / carrier_frequency
wavenumber = 2 * np.pi / wavelength

# Number of horizontal elements
ris_num_els_hor = 10

# Size of each element
ris_size_el = wavelength/2

# Define specific positions for the UEs
ue_angles = np.linspace(0, np.pi/2)

########################################
# Evaluating maximum frequency
########################################

#  Range of frequencies
fundamental_freq_range = np.array([1/4, 1/2, 1])

# Prepare to save results
avg_power = np.zeros((fundamental_freq_range.size, ue_angles.size))

# Go through all frequencies
for ii, fundamental_freq in enumerate(fundamental_freq_range):

    # Compute average power
    avg_power[ii] = average_power(ue_angles, ris_num_els_hor, fundamental_freq)

########################################
# Plot average power
########################################
fig, ax = plt.subplots(figsize=(3.15, 3/2))

styles = ['-', '--', ':']
labels = ['0.25', '0.50', '1.00']

# Go through all frequencies
for ii, fundamental_freq in enumerate(fundamental_freq_range):
    ax.plot(np.rad2deg(ue_angles), avg_power[ii, :], linestyle=styles[ii], color='black', linewidth=1.5, label='$F_0=' + str(labels[ii]) + '$ Hz')

ax.set_ylabel(r'average power, $P_{a_k}$')
ax.set_xlabel(r"UE's angle, $\theta_k$ in degrees")

#ax.set_yscale('log')

ax.set_xticks(np.arange(0, 100, 10))

ax.legend(fontsize='x-small', framealpha=0.5)

ax.grid(color='gray', linestyle=':', linewidth=0.5, alpha=0.5)

plt.tight_layout()

plt.show()
